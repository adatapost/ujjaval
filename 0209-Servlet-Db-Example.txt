Step-1
 
create table emp
(
    emp_id int PRIMARY key auto_increment,
    emp_name varchar(100) not null,
    emp_salary int,
    join_date date 
    )

Step-2 - Db (General actions)

package com.adatapost;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class Db implements AutoCloseable {

	// Database specific constants
	private static final String URL = "jdbc:mysql://localhost/sample_db";
	private static final String USER = "root";
	private static final String PASS = "";
	private static final String DRIVER = "com.mysql.cj.jdbc.Driver";
	
	static {
		try {
			Class.forName(DRIVER);
			
			
		} catch (Exception ex) {
			System.out.println("Error while loading JDBC Driver!!!" + ex);
		}
	}

	// JDBC Resource instances
	private Connection cn = null;
	private PreparedStatement ps = null;

	// Constructor
	public Db(String sql) throws Exception {
		cn = DriverManager.getConnection(URL, USER, PASS);
		ps = cn.prepareStatement(sql);
	}

	// Returns the statement object
	public PreparedStatement getPs() {
		return ps;
	}

	// Execute the non-Queries (Other that SELECT query)
	public boolean execute() throws Exception {
		return ps.executeUpdate() > 0;
	}

	// Execute the SELECT (Query) which returns single row.
	public Object[] row() throws Exception {
		Object[] ar = null;
		try (ResultSet rs = ps.executeQuery()) {
			int count = rs.getMetaData().getColumnCount();
			if (rs.next()) {
				ar = new Object[count];
				for (int i = 0; i < count; i++) {
					ar[i] = rs.getObject(i + 1);
				}
			}

		} catch (Exception ex) {
			throw new Exception("Error while executing 'row' method", ex);
		}
		return ar;
	}

	// Execute the SELECT (Query) which returns multiple rows.
	public List<Object[]> rows() throws Exception {
		List<Object[]> list = new ArrayList<>();
		Object[] ar = null;
		try (ResultSet rs = ps.executeQuery()) {
			int count = rs.getMetaData().getColumnCount();
			while (rs.next()) {
				ar = new Object[count];
				for (int i = 0; i < count; i++) {
					ar[i] = rs.getObject(i + 1);
				}
				list.add(ar);
			}

		} catch (Exception ex) {
			throw new Exception("Error while executing 'rows' method", ex);
		}
		return list;
	}

	// Dispose the JDBC Resources
	@Override
	public void close() throws Exception {
		if (ps != null)
			ps.close();
		if (cn != null)
			cn.close();
	}
}

Step-3 Util (U.java)

package com.adatapost;

import java.text.SimpleDateFormat;

public class U {
	public static int toInt( String value ) {
		try {
			return Integer.parseInt(value);
		} catch(Exception ex) {
			
		}
		return 0;
	}
	public static java.util.Date toDate(String value, String pattern) {
		try {
			return  new SimpleDateFormat(pattern).parse(value);
		} catch(Exception ex) {
			
		}
		return  null;
	}
	
	public static java.sql.Date utilToSql( java.util.Date date) {
		return new java.sql.Date(date.getTime());
	}
}


Step-4 Emp.java (POJO)

package com.adatapost.model;

import java.util.Date;

/*
 * 
 * create table emp
(
    emp_id int PRIMARY key auto_increment,
    emp_name varchar(100) not null,
    emp_salary int,
    join_date date 
    )

 */
public class Emp {
	private Integer id;
	private String empName;
	private int empSalary;
	private java.util.Date joinDate;

	public Emp() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Emp(Integer id, String empName, int empSalary, Date joinDate) {
		super();
		this.id = id;
		this.empName = empName;
		this.empSalary = empSalary;
		this.joinDate = joinDate;
	}

	public Emp(Integer id) {
		super();
		this.id = id;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	public int getEmpSalary() {
		return empSalary;
	}

	public void setEmpSalary(int empSalary) {
		this.empSalary = empSalary;
	}

	public java.util.Date getJoinDate() {
		return joinDate;
	}

	public void setJoinDate(java.util.Date joinDate) {
		this.joinDate = joinDate;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Emp other = (Emp) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Emp [id=" + id + ", empName=" + empName + ", empSalary=" + empSalary + ", joinDate=" + joinDate + "]";
	}

}


Step-5 EmpDao.java

package com.adatapost.model;

import java.util.ArrayList;
import java.util.List;

import com.adatapost.Db;
import com.adatapost.U;

public class EmpDao {
	public static boolean add(Emp emp) {
		String sql = "insert into emp (emp_name,emp_salary,join_date) values (?,?,?)";
		try (Db x = new Db(sql)) {
			x.getPs().setString(1, emp.getEmpName());
			x.getPs().setInt(2, emp.getEmpSalary());
			x.getPs().setDate(3, U.utilToSql(emp.getJoinDate()));
			return x.execute();
		} catch (Exception ex) {
			System.out.println("Error in add : " + ex);
		}
		return false;
	}

	public static boolean update(Emp emp) {
		String sql = "update emp set emp_name=?,emp_salary=?,join_date=? where emp_id=?";
		try (Db x = new Db(sql)) {
			x.getPs().setString(1, emp.getEmpName());
			x.getPs().setInt(2, emp.getEmpSalary());
			x.getPs().setDate(3, U.utilToSql(emp.getJoinDate()));
			x.getPs().setInt(4, emp.getId());
			return x.execute();
		} catch (Exception ex) {
			System.out.println("Error in update : " + ex);
		}
		return false;
	}

	public static boolean delete(Emp emp) {
		String sql = "delete from emp where emp_id=?";
		try (Db x = new Db(sql)) {
			x.getPs().setInt(1, emp.getId());
			return x.execute();
		} catch (Exception ex) {
			System.out.println("Error in delete : " + ex);
		}
		return false;
	}

	public static Emp get(Emp emp) {
		String sql = "select * from emp where emp_id=?";
		try (Db x = new Db(sql)) {
			x.getPs().setInt(1, emp.getId());
			Object[] ar = x.row();
			if (ar != null) {
				Emp temp = new Emp();
				temp.setId((Integer) ar[0]);
				temp.setEmpName((String) ar[1]);
				temp.setEmpSalary((Integer) ar[2]);
				temp.setJoinDate((java.util.Date) ar[3]);
				return temp;
			}
		} catch (Exception ex) {
			System.out.println("Error in get : " + ex);
		}
		return null;
	}

	public static List<Emp> gets() {
		List<Emp> list = new ArrayList<>();
		String sql = "select * from emp";
		try (Db x = new Db(sql)) {
			for (Object[] ar : x.rows()) {
				Emp temp = new Emp();
				temp.setId((Integer) ar[0]);
				temp.setEmpName((String) ar[1]);
				temp.setEmpSalary((Integer) ar[2]);
				temp.setJoinDate((java.util.Date) ar[3]);
				list.add(temp);
			}
		} catch (Exception ex) {
			System.out.println("Error in gets : " + ex);
		}
		return list;
	}
}


Step-6 Servlet EmpServlet

package com.adatapost.servlets;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.adatapost.U;
import com.adatapost.model.Emp;
import com.adatapost.model.EmpDao;

@WebServlet("/emp")
public class EmpServlet extends HttpServlet {
	
	// List the resource
	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) throws ServletException, IOException {
		
		request.setAttribute("emps", EmpDao.gets());
		request.setAttribute("emp", new Emp());
		request.getRequestDispatcher("/emp/index.jsp")
		       .forward(request, response);
	}
 
	//Update the resource as well as list
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		// Receive the client data
		Emp emp = new Emp();
		emp.setId( U.toInt(request.getParameter("id")) );
		emp.setEmpName(request.getParameter("empName"));
		emp.setEmpSalary(U.toInt(request.getParameter("empSalary")));
		emp.setJoinDate( U.toDate(request.getParameter("joinDate"), "yyyy-MM-dd"));
		String cmd = request.getParameter("cmd");
		String message = "";
		
		/* Actions */
		if("Add".equals(cmd)) {
			message = EmpDao.add(emp) ? "Added" : "Can't Add";
		}
		if("Update".equals(cmd)) {
			message = EmpDao.update(emp) ? "Updated" : "Can't Update";
		}
		if("Delete".equals(cmd)) {
			message = EmpDao.delete(emp) ? "Deleted" : "Can't Delete";
		}
		if("ById".equals(cmd)) {
			emp = EmpDao.get(emp);
			if(emp==null) message = "Not found";
		}
                if("Cancel".equals(cmd)) {
			emp = null;
		}
		request.setAttribute("emps", EmpDao.gets());
		request.setAttribute("emp", emp);
		request.setAttribute("message", message);
		request.getRequestDispatcher("/emp/index.jsp")
		       .forward(request, response);
	}
}



<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
<!DOCTYPE html>
<html>
<head>
  <meta charset="ISO-8859-1">
  <title>Manage Employee</title>
</head>
<body>
<div class="container">
   <div class="data-entry">
     <fieldset>
      <legend>Employee</legend>
      <form method="post" action="emp">
        <p>
        Id : <input type="number" name="id" value="${emp.id}" /> 
        <button name="cmd" value="ById">Search</button>
        </p>
        <p>Name : <input type="text" name="empName" value="${emp.empName}" /> </p>
        <p>Salary : <input type="number" name="empSalary" value="${emp.empSalary}" /> </p>
        <p>JoinDate : <input type="date" name="joinDate" value="${emp.joinDate}" /> </p>
        <p>
          ${ message }
        </p>
        <p>
        <c:if test="${ empty emp.id }">
          <button name="cmd" value="Add">Add</button>
        </c:if>
        
        <c:if test="${ not empty emp.id }">
          <button name="cmd" value="Update">Update</button>
          <button name="cmd" value="Delete">Delete</button>
        </c:if>
        
          <button name="cmd" value="Cancel">Cancel</button>
        </p>
      </form>
     </fieldset>
   </div>
   
   <div class="data-list">
     <table>
       <c:forEach var="e" items="${emps }">
         <tr>
          <td>${ e.id }</td>
          <td>${e.empName }</td>
          <td>${e.empSalary}</td>
          <td>${e.joinDate }</td>
          <td>
           <form method="post" action="emp">
             <input type="hidden" name="id" value="${e.id }" />
             <button name="cmd" value="ById">Edit</button>
             <button name="cmd" value="Delete">Delete</button>
           </form>
          </td>
         </tr>
       </c:forEach>
     </table>
   </div>
</div> 
</body>
</html>
