The HttpSession and State Management
=====================================

As we know that HTTP is a stateless protocol and in stateless protocol no request or response record is either saved at client or server machine/programs. That means each request made to server will be consider as "fresh" or "new" request. For some apps, it is mandatory to remember the client or to identify the client as well as save client specific data.

In Web App, we've some mechanisms to save the "Identity" of client and also save the "user/client" specific data and this can be achieved by the:

  1. Session Tracking System - An object of HttpSession that will be created 				automatically when a first request from the user
				is received by the application server and this object
				remains alive till that user stop the communication
				by closing the browser/connection or force termination
				of session by server program in case of errors or
				system administrator's action.

     This is server side user's identity system which automatically uses "cookies" to
     persists client's identity at client as well as server side.

  2. The Cookie System -- This mechanism is provided by the WEB-Browser and it also
     				represents the identity & data of user but at 				"client's" environmemt (a machine where a browser
				is installed).

 Client1 -------->first request ----------> Web+App Server ---> Create a session
								object with unique
								key called 
								sessionId and
								this sessionId sent
								back to browser in
								the form of "Cookie"
   ^
   |----------<--Response along with sessionId <---------------------- |

    ----------->second request with sessionId --------------------------> 
    ----------->third request with sessionId ---------------------------->
    .......

NOTE: Cookies are always travels to server with each request.

Home made state management via re-write HTML attributes and form's parameters
-----------------------------------------------------------------------------
Generally we uses "querystring --- page.jsp?id=10&name=ABC" or <input> or <input type="hidden"> to persists the data within the page.

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!doctype html>

<c:set var="no" value="${param.no +  1}" />
<br/>Value ${ no }

<a href="index.jsp?no=${no}">Refresh</a>

<form method="get">
  <input type="hidden" name="no" value="${no }">
  <button>Refresh</button>
</form>

Example: We've some image files into an array or List<String>. Write code which navigate one by one image when user press First, PRev, Next, Last button/link.


Example: Naviagate list of cities

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!doctype html>

<c:set var="cities" value="Mehsana,Rajkot,Patan" />
<c:set var="index" value="${ param.index + 0}" />
${ cities.split(',')[index] }

<br/>
<a href="index.jsp?index=${index-1}&cmd=Prev">Prev</a>
<a href="index.jsp?index=${index+1}&cmd=Next">Next</a>

Example: Create or add objects into "session Scope".

<c:set var="no" value="2" scope="session" />
<a href="next.jsp">Next Page</a>

And code in next.jsp
  ${no}


Example: 

 <c:set var="no" value="${no+1}" scope="session" />
 ${no}
 <a href="index.jsp">Referesh</a>

Obtain session object reference in Servlets
--------------------------------------------

                HttpSession session = request.getSession();
		session.setAttribute("no", "100");
		System.out.println(session.getId());
		System.out.println(session.getCreationTime());
		System.out.println(session.getMaxInactiveInterval());
		request.getRequestDispatcher("/about.jsp").forward(request, response);
		
Basic methods of Session object:
1. getId() - Returns unique identified which is an identity of request-response.
2. getCreationTime() - Returns time in millis
3. getMaxInactiveInterval() - Returns inactive interval which was set by the app 
				server in seconds. 1800 seconds = 30 minuts.
4. setMaxInactiveInterval(seconds) - Set inactive interval in seconds.
5. removeAttribute("key") - Remove the data.
6. getAttribute("key") - Return data of given key in java.lang.Object form.

The Filter class -- Implementation of javax.servlet.Filter interface
================

The "Filter" is a servlet like component but it is not a servlet and it is used to "Filter" the requests and responses. It sits between user's request and servlets.

 User1-->Request--> FirstFilter --> SecondFilter -> .... ---> Servlet
      <-- Response<---          <--              <--      <--- Response

 There can be one or more filters. 
 
 Each filter intercept the request and response and it deside whether to stop
 the request, to forward the request or to redirect the request to other resources.
 The last component in filter-chain is the "Servlet".

 ** Important Note **                
 Frameworks like JSF, Spring, and many more uses Filters & Servlets implicitly. We  don't have to create these components explicitly.

Steps to define & config the Filter class
-----------------------------------------
package com.adatapost.filters;

@WebFilter("/*")
public class FirstFilter implements Filter {
 public FirstFilter() { }
 public void destroy() { }

 public void doFilter(ServletRequest request, 
	ServletResponse response, FilterChain chain) 
                  throws IOException, ServletException {
		
    //Create wrapper objects
    HttpServletRequest req = (HttpServletRequest) request;
    HttpServletResponse res = (HttpServletResponse) response;
		   
   res.getWriter().print("Hello World!");

   //Pass request & response to next component in chain		   
   chain.doFilter(req, res);
 }
 public void init(FilterConfig fConfig) throws ServletException { }
}//End class

In this example, we want to write "Hello World" before any kind of output produced by the servelts, resources, files.

Filter components are used to:
  1. Filter the "content"
  2. Compress the request or response data
  3. Encrypt or decrypt the request and response
  4. Define login - authorization system
  5. Design the High Level Web Framework
   and there are many different-different usage including downloading of files,
   video and audio streaming.

The Virtual or Relative Path of resource and find the absolute path
====================================================================
Each file or resource in our web app is refer via "relativePath" or "virtualPath" in servlets or with hyperlinks or embed elements like img, video, script, audio and so on.
e.g
 <img src='images/sample.jpg' >
 <script src='js/jquery.js'></script>

Now, in order to use the resource in our program especially by pointing that resource by absolute path (full path) for Input Output operations or deletion or copying or renaming the resources we must have to find out the "Actual or Real path".

We've a method in HttpServletRequest called getServletContext() and it returns an application context object whose method named getRealPath("/") returns physical or absolute or real path of your webapp's root.

 //Convert virtual or relative path to absolute path
  String relativePath = "/files/sample.pdf";
  String absPath = req.getServletContext().getRealPath(relativePath);
  System.out.println( absPath );
  System.out.println( req.getServletContext().getRealPath("/") );

Example: Download a video/text/pdf or any file

@WebFilter("/download/googoosh")
public class FirstFilter implements Filter {
	public void doFilter(ServletRequest request, 
			ServletResponse response, FilterChain chain) throws IOException, ServletException {
		  //Create wrapper objects
		   HttpServletRequest req = (HttpServletRequest) request;
		   HttpServletResponse res = (HttpServletResponse) response;
		   
		   HashMap<String, String> map = new HashMap<>();
		   map.put("googoosh", "one.mp4");
		   map.put("reena", "two.png");
		   map.put("seminar", "three.pdf");
		   
		   //Convert virtual or relative path to absolute path
		   String relativePath = "/files/one.mp4";
		   String absPath = req.getServletContext().getRealPath(relativePath);
		   File file= new File(absPath);
		   
		   //Set Response Headers/Instructions
		   res.addHeader("content-type", "application/octate-stream");
		   res.addHeader("content-length", String.valueOf(file.length()));
		   res.addHeader("content-disposition", "attachment; filename=googoosh.mp4");
		   
		   
		   try(BufferedInputStream in = 
				   new BufferedInputStream(
						   new FileInputStream(absPath))) {
			   byte []bytes = new byte[8012];
			   int numRead = 0;
			   while( (numRead = in.read(bytes,0,bytes.length))>0 ) {
				   res.getOutputStream().write(bytes, 0, numRead );
			   }
			   res.getOutputStream().flush();
		   }catch(Exception ex) {
			  System.out.println(ex);   
		   }
		  
	}
	public void init(FilterConfig fConfig) throws ServletException {
	}
	public FirstFilter() {
	}
	public void destroy() {
	}
}


Example: Improved version of previous Filter - It takes any valid resource name and download/streams it if exists.

@WebFilter("/download/*")
public class FirstFilter implements Filter {
	public void doFilter(ServletRequest request, 
			ServletResponse response, FilterChain chain) throws IOException, ServletException {
		  //Create wrapper objects
		   HttpServletRequest req = (HttpServletRequest) request;
		   HttpServletResponse res = (HttpServletResponse) response;
		   
		   String requestUri = req.getRequestURI();
		   String []parts = requestUri.split("/");
		   for(String p: parts) {
			   System.out.println(p);
		   }
		   if( parts.length != 4) {
			   res.getWriter().print("Invalid resource!!!");
			   return;
		   }  
		   String resource = parts[3];
		   
		   HashMap<String, String> map = new HashMap<>();
		   map.put("googoosh", "one.mp4");
		   map.put("reena", "two.png");
		   map.put("seminar", "three.pdf");
		   
		   if(!map.containsKey(resource)) {
			   res.getWriter().print("Given resource is not found!");
			   return;
		   }
		   
		  //Convert virtual or relative path to absolute path
		   String relativePath = "/files/" + map.get(resource);
		   String absPath = req.getServletContext().getRealPath(relativePath);
		   File file= new File(absPath);
		   
		   //Set Response Headers/Instructions
		   res.addHeader("content-type", "application/octate-stream");
		   res.addHeader("content-length", String.valueOf(file.length()));
		   res.addHeader("content-disposition", "attachment; filename=" + map.get(resource));

		   try(BufferedInputStream in = 
				   new BufferedInputStream(
						   new FileInputStream(absPath))) {
			   byte []bytes = new byte[8012];
			   int numRead = 0;
			   while( (numRead = in.read(bytes,0,bytes.length))>0 ) {
				   res.getOutputStream().write(bytes, 0, numRead );
			   }
			   res.getOutputStream().flush();
		   }catch(Exception ex) {
			  System.out.println(ex);   
		   }
	}
	public void init(FilterConfig fConfig) throws ServletException {
	}
	public FirstFilter() {
	}
	public void destroy() {
	}
}


You can use following URIs to test the download:

 /app/download/reena
 /app/download/seminar
 /app/download/googoosh

Or you can link or embed them in document.

<a href="download/seminar">Download Seminar</a>
<video src="download/googoosh" autoplay controls></video>
<audio src="download/googoosh" autoplay controls></audio>
<a href="download/googoosh">Download Googoosh Video</a>

<img src="download/reena">
<a href="download/reena">Download Image</a>


 

