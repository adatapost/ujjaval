The "console" and Developer Tool
---------------------------------
In order to debug the JavaScript code, there is a "console" object (for Developer Environment) to  display or dump the debugging "log" and this log will be printed into Developer Tool.

   You may use console.log()
               console.dir() 
               console.info() and many more method for dump the debug log.

The "let" keyword  -- create variable or entity into "local" namespace instead of "window".
------------------    
It is good practice to use "let" keyword and that way we can prevent a global namespace being poluted.

So any entity without "let" will be added into "window" namespace except the "var" keyword is used into a "function" -- if "var" keyword is used to declare entity inside the function, the entity has "local" scope.

Example:
 <script>
     let no = 110;
     var firstName = "Raj";
     let lastName = "Shah";

     console.log(no, firstName, lastName);
     console.log(window.no, window.firstName, window.lastName);
     console.dir( new Date() );
     console.log( [10,20,40]);

     console.assert(no==10,"OK");
     
     console.dir( [10,20,40]);
     console.error("This is illgal");
     console.info("This is info text");
  </script>

console.dir() - dump the object content at console.
console.assert(boolean, text) -- Break point. It displays error "text" when result of boolean 				 expression is evaluted to false.

let vs var 
----------
1. let keyword declare a variable once in a given "scope". The "scope" can be a script block, function, class, statement-level etc.
2. var keyword declare a variable more than once into "window" namespace.
3. Variables created using "let" will be discarded as soon as the "scope" is reached out of context.
4. The entities in window namespace has "global" scope and remains till web-browser is running.

How to determine the type of data programatically?
------------
Use typeof construct.

let n = 10;
console.log( typeof(n) );
n = 20.20;
console.log( typeof(n) );
n = 'This is string';
console.log( typeof(n) );
console.log( typeof([10,20,30]) );

Example: check the numeric and string functions/methods.
e.g at console prompt,
>let no = 100000.3434343
>no.toFixed(2)
Or write code in script file
let no = 1000000.2323232;
console.log( no.toString() );
console.log( no.toFixed(1) );

Example: "if", "switch", "while", "for", "do while" has same syntax as "Java" language

//test the boolean expression (Falsy/Truthy) value
let no = 0;
if(no) {
  console.log(no);
} else {
  console.log('Falsy value!');
}

for(let n=1;n<=10;n++) {
  console.log(n);
}

Example: Array - Two syntax to create an array:
1. [] and
2. Array construct

let nos = [10,20,30];
let values = new Array(20,30,40);

console.log( nos );
console.log( values );

console.log( nos.length );
console.log( nos[0], nos[1], nos[2] );

Example: Arbitory indexed arrays
let nos=[];  // empty array
nos.push(10);  // insert at the end
nos.push(20);  
nos[10] = 30;   // at 10th index
nos[100] = 60;  

console.log( nos.length ) // 101 
for(let i=0;i<nos.length;i++) {
  console.log( i, nos[i]);
}
//indexed for each loop 
  for(let index in nos) {
	  console.log( index, nos[index] );
  }

The indexed or property for each loop returns "index" of an array and "property" from the object.

Example: Use/Test the array object functions. Use console prompt which will shows the syntax.

e.g 
>let nos = [];
>nos.push(22);
>nos.pop()

//to insert an element at given index
//splice( atIndex, removeIndex, newElements.....)
>nos.splice(0,0,50,60,70); // insert at 0 index
>nos
>nos.splice(2,1);  // remove 2nd element
>nos.splice(2,2);  // remove 2 elements from 2nd index onward

JSON - JavaScript Object Notation -- a way to create a custom object
------------------------------------------------------------
Syntax:

  {
    "propertyName": value,
    ....
   };

let emp = {
   "id": 10,
   "name": "Rajesh",
   "phone": {
        "home": 499232,
        "office": 343434
    }
};

console.log( emp.id, emp.name, emp.phone.home, emp.phone.office );
console.log( emp["id"], emp['name'], emp["phone"]["home"], emp["phone"]["office"] );

Object properties can be read via . dot as well as subscript operator.

To add new property,

   emp.address = "ABC Society";
   
To remove a property,

   delete emp.name;

Example: List of students
let students = [{"roll": 10, "name": "Man"}, {"roll": 43, "name": "Ram"} ];
students.push( {"roll": 4,"name": "Tan" } );
for(let index in students) {
  console.log( students[index] );
  let s = students[index];
  console.log(s.roll, s.name);
}

The function keyword and function definitions
==============================================
There are two ways to declare functions:
1. Declaraive method 
2. Variable function -- anonymous function

Syntax: declarative function

  function functionName(argument.....) {
     //body
  }


Syntax: Variable function or Anonymous function

  let varName = function(arg.....) {
     //body
  };

  Variable function or anonymous functions are available during program execution whereas   declarative functions exists forever.

<script>
   function add(no1, no2) {
     return no1 + no2;
    }
   let mul = function(no1,no2) {
      return no1*no2;
   };

   // Call the functions
   console.log( add(2,3) );
   console.log( mul(2,3) );
</script>
 

Create/define a class
----------------------
The 'function' keyword is also used to define a class:

function TypeName(args...) {
   //members must be qualified with 'this' keyword

   this.data1 = value1;
   this.data2 = function() {
 
   };
}

To instantiate the class, use "new TypeName(param)" syntax.

Example:

function Emp(id, name) {
  this.id = id;
  this.name = name;

  this.getEmp = function() {
     return this.id + "  " + this.name;
  };
}

//Create instances
let p = new Emp();
let q = new Emp(10,"Reena");

console.log(p.id, p.name);
console.log(q.id, q.name);
console.log(q.getEmp());  // call a method
p.id = 90;
p.name = "Amar";
console.log(p.getEmp());


Example: parse the number (String to numeric) using "parseInt" and "parseFloat" functions

let str = "1000.23";
let no = parseFloat(str);
console.log( typeof(no), no);

Note: Use toString() of numeric object to format the string.

Example: Display message text using 'alert(text)' function
         Display 'input' dialog using 'prompt(text)' function
         Display confirm dialog using 'confirm(text)' function

let no = prompt('Enter the number');
if(!no) {
  alert('Pl. type number');
} else {
  let result = confirm('Got the data! Do you want to continue...?');
  if(result) {
      alert('OK then continue...!');
  } else {
      alert('OK Bye..');
  }
}

Example: Handling the events. Or attach your functions to the HTML object's event.

There are two ways to attach your functions to the events of HTML objects:
  1. Declarative attachment and
  2. Programmatically/Dynamically attachment

Here is an example of declarative attachement of 'function' to the HTML object's event:

  <p onclick='doThis()'>Click Here</p>
  <button onclick='doThis()'>OK</button>

  <script>
     function doThis() {
       alert('This is the function called via event of DOM!');
      }
  </script>

Example: Passing parameters to the handlers
  
  <p onclick='doThis("para")'>Click Here</p>
  <button onclick='doThis("button")'>OK</button>

  <script>
     function doThis(data) {
       alert('This is the function called via event of DOM! and I got action from :' + data);
      }
  </script>

Referencing the HTML object via JavaScript code OR The DOM API
==============================================================
As we know that each HTML tag is transformed into an object called "HTML" object and if you want to update the properites of HTML object or call a method of an object, we must have to use the DOM interface which provide standard APIs to process or parse the objects.

The "document" object proprty represent the DOM implementation. Here, in browser, we have two readly to use references of "body" and "head" tag  -- document.body and document.head.

But, to retrieve objects inside the head or body, we must have to use DOM's search functions -- getElementsByTagName, getElementById, getElementsByName, querySelector and querySelectorAll etc.

querySelector() - returns single HTML object from the given "CSS selector pattern" whereas querySelectorAll() returns one or more HTML objects based upon query selector pattern.

Example:

<h1>One</h1>
<p name="test">Two</p>
<h1>Three</h1>
<h1 name="test">Four</h1>

<script>
  let list = document.getElementsByTagName('h1'); // returns NodeList of three objects
  for(let i=0;i<list.length;i++) {
     let obj = list.item(i);
     console.log( obj );
  }
</script>


Example: Access the CSS properties of body object

<script>
   document.body.style.color = "red";
   document.body.style.fontSize = "2em";
   document["body"]["style"]["backgroundColor"] = "#00f";
</script>

Example: Handle the "event(s)" dynamically. We will use obj.addEventListener('eventName',methodRef) to attach the event handler. 
Note: eventName don't include 'on' prefix. 

e.g 

<h1>Hello</h1>
<script>
  let h = document.querySelector('h1');
  h.addEventListener('click',doSomething);
  function doSomething() {
    console.log('Something...!');
  }
</script>

OR 

h.addEventListener('click', function() {
   console.log('This is anonymous function');
});

Example: Attach one or more handlers

<div id="test">Click Here</div>

<script>
  function action1() { console.log('Action1'); }
  function action2() { console.log('Action2'); }

  let test = document.querySelector('#test');
  test.addEventListener('click',action1);
  test.addEventListener('click',action2);
  test.addEventListener('mouseenter',function() {
     console.log('Mouse entered into the region!!!');
  });
</script>


Example: Reference the current HTML object - an object through which the event is raised.

<h1 onclick='doSomething(this)'>Hello</h1>

<script>
  function doSomething(obj) {
    obj.style.color  = "red";
  }
</script>

Example: Create new HTML objects and append them into existing tree/dom.

<div id="output"></div>

<script>
   let a1 = document.createElement('input'); 
   a1.setAttribute('type','text');
   let a2 = document.createElement('h3');
   
   a1.setAttribute("value","JavaScript");
   a2.innerHTML = "The JavaScript Language";
   
   //Now, append these two objects into "#output" dom
   let output = document.querySelector('#output');
   output.appendChild( a1 );
   output.appendChild( a2 );
</script>

NOTE: innerHTML property set/get the value inside the open and close tag. e.g 
<p>This is innerHTML</p>

The input, select elements has "value" property so we can read or set the value using "value" as well as setAttribute and getAttribute methods.

Example: Populate the <select>

<select id="city"></select>

<script>
  let cities = ["Meh",'Pata','Raj','Sur'];
  for(let i in cities) {
     let op = document.createElement('option');
     op.innerHTML = cities[i];
     document.querySelector('#city').appendChild( op );
  }
</script>

Example: JSON object -- parse and stringfy the data

   let str = '{"no": 10, "name": "Reena"}';
   let obj = JSON.parse(str);  // String to object
   obj.address = "Mehsana - 239993";
   console.log(obj);

   let str1 = JSON.stringify(obj);  // Object to string
   console.log( str1 );

Example: Request the server resources programatically and handle the response backgroundly. 

This kind of communication is achieve via "XMLHttpRequest" object and this type of programming is known as AJAX - Asynchronious JavaScript And XML.

Assume that we've /test servlet which returns "plain text data -- 'Hello Everybody, It's <currentTime>'";

code in doGet of (/test) servlet:

   response.getWriter().write("Hello Everybody, It's " + new java.util.Date() );
   response.getWriter().flush();

And code in any .jsp or .html page:

<button onclick="doRequest()">Request the /test servlet</button>
<script>
    function doRequest() {
        //1. Instantiate the XHR
        let xhr = new XMLHttpRequest();
        //2. Set URL and data
        xhr.open("get", "test");
        //3. Set up the response handler callback
        xhr.onreadystatechange = function() {
            if(xhr.DONE == xhr.readyState ) {
              console.log( xhr.responseText );
            }
        };
        //4. Start/make the request
        xhr.send();
     }
</script>

Example: Send the POST data. Create doPost in /test servlet to receive the data and client code would be:
  
    xhr.open("post","test?no=10&name=Reajesh");
    ....

and doPost:
   String no = request.getParameter("no");
   String name = request.getParamer("name");
   response.getWriter().write("Success " + no + " " + name);
   response.getWriter().flush();

The FormData object to pass the both plain text as well as binary data (file upload)
-------------------------------------------------------------
 The methods "set" and "append" allow us to specify the name-value entry along with "filename" if that entry's value is "blob - binary large object".

  let data = new FormData();
  data.set("no","10");
  data.set("photo", photo_object, "my.png");
 Or
  data.append("name", "Value...");
 
Then after pass this "FormData" object to the send() method of XHR.

 e.g xhr.send( data );

On other side (server side), you must configure or annotate @MultipartConfig servlet in order to read the "FormData" whose 'enctype" is "multipart/form-data" already set.

The JSON Parser
===============
To parse the "Java" objects into JSON string and vice-versa. This is an open source API and you can download the JSON parser source from json.org and github.com.

There are two entry point classes namely JSONObject and JSONArray. JSONObject deals with JSON object (e.g { "key": value } ) and JSONArray deals with list or array. e.g [{},{}]

Step-1 Download the json api source code or .jar file. We will use source code in this example.

Create org.json package and paste the "JSON source programs" in it.

Step-2 : code in any method:

	         Student student = new Student(10,"Reena");
		 JSONObject obj = new JSONObject(student);
		 System.out.println(obj.toString());
		 
		 String jsonStr = "{\"roll\": 12, \"name\": \"Man\"}";
		 obj = new JSONObject(jsonStr);
		 System.out.println(obj.getInt("roll") + " " + obj.getString("name"));

Note: Presume that we've Student(int roll, String name) POJO.

Example: List<T> to JSON string.

 List<Student> students = new ArrayList<>();
 students.add( new Student(10,"A") );
 students.add( new Student(30,"B") );

 JSONArray arr = new JSONArray(students);
 String jsonString = arr.toString();
 System.out.println( jsonString );

Example: Receive the country's id and name and also return the "country" data in the form of JSON string.

1. Create Country(id,name) POJO
2. code in doPost of "country" CountryServlet

String id = request.getParameter("id");
String name = request.getParameter("name");
	    
Country c = new Country(Integer.parseInt(id),name);
     
response.setContentType("application/json");
response.getWriter().write( new JSONObject(c).toString() );
response.getWriter().flush();

3. Client code ( in any .jsp or .html page) country.jsp

<input type="number" id="id" placeholder="Country Id"/>
<input type="text" id="name" placeholder="Country Name"/>
<button onclick="doRequest()">Save</button>

<script>
 let cid = document.querySelector('#id');
 let cname = document.querySelector('#name');
  function doRequest() {
	  let xhr = new XMLHttpRequest();
	  xhr.open("post","test");
	  let data = new FormData();
	  data.set("id", cid.value);
	  data.set("name", cname.value);
	  xhr.onreadystatechange = function() {
          if(xhr.DONE == xhr.readyState ) {
              console.log( xhr.responseText);
              let obj = JSON.parse(xhr.responseText);
              console.log( obj );
              console.log( obj.id, obj.name );
           }
	  };
	  xhr.send(data);
   }
</script>

Example: Wrap up the "AJAX" code and other JavaScript code into resulable "functions".

1. Create /js/my.js (or any ther name you like) with following code:

function ajax(method,url,data, callback ) {
  let xhr = new XMLHttpRequest();
  xhr.open(method, url);
  xhr.onreadystatechange = function() {
    if( xhr.DONE == xhr.readyState ) {
        callback( xhr.responseText );
     }  
   };
  xhr.send(data);
 }
function post(url,data,callback) { ajax("post",url,data,callback); }
function get(url,data,callback) { ajax("get",url,data,callback); }
function val(id, value) {
 if(value) {
   return document.querySelector(id).value = value;
  }
  return document.querySelector(id).value;
}
function html(id, value) {
  if(value) {
   return document.querySelector(id).innerHTML = value;
  }
  return document.querySelector(id).innerHTML;
}

And client code to send / read the data
  <input type="number" id="id" />
  <input type="number" id="name" />

  <script src="js/my.js"></script>  
  <script>
     post("country",null, function(result) {
        let obj = JSON.parse(result);
        val('#id', obj.id);
        val('#name', obj.name);
      });
  </script>

Example: Design a /country servlet which receive the data to perform add, delete, update, serach and also returns the list of countries in the form of JSON.

In this sample, we will create a POJO which represent the structure of JSON data.

Step-1 Create a POJO named ResponseData

public class ResponseData {
   private String message;
   private boolean status;
   private Object data;
   //TODO
}

Now, design the doPost method to receive data 

            String id = request.getParameter("id");
	    String name = request.getParameter("name");
	    String action = request.getParameter("action");
	    
	    ResponseData rd = new ResponseData();  
	    
	    if("Add".equals(action)) {
	    	//TODO
	    	rd.setMessage("Added");
	    	rd.setStatus(true);
	    } else  if("Delete".equals(action)) {
	    	//TODO
	    	rd.setMessage("Failed");
	    	rd.setStatus(false);
	    } else  if("Update".equals(action)) {
	    	//TODO
	    	rd.setMessage("Update");
	    	rd.setStatus(true);
	    } else  if("Get".equals(action)) {
	    	//TODO
	    	rd.setData(new Country(10,"UK"));
	    	rd.setStatus(true);
	    } else  if("All".equals(action)) {
	    	//TODO
	    	List<Country> list = new ArrayList<>();
	    	list.add(new Country(2,"Nepal"));
	    	list.add(new Country(12,"PK"));
	    	list.add(new Country(32,"India"));
	    	rd.setStatus(true);
	    	rd.setData(list);
	    }
        response.setContentType("application/json");
        response.getWriter().write( new JSONObject(rd).toString() );
 	    response.getWriter().flush();

     
Client code:
  let d = new FormData();
  d.set("action","Get");
  d.set("id","10");
  d.set("name","AA");
  post("country",d,function(r) { console.log(r); } );


Client code:

<script>
    let d = new FormData();
    d.set("action","All");
    d.set("id","20");
    d.set("name","Japan");
    post("country",d, function(result){
          let obj = JSON.parse( result );
          console.log( obj );
          console.log( obj.data );
	  });
 </script> 








  
